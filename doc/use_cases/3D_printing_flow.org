:PROPERTIES:
:ID:       73f5d57e-d16a-490a-b4e1-0254d6296590
:END:
#+language: en
#+EXPORT_FILE_NAME: ./3D_printing_flow.md

#+CALL: ../../lp.org:check-result()

#+name: init
#+BEGIN_SRC bash :results none :exports none :session 73f5d57e-d16a-490a-b4e1-0254d6296590
  . ./sandboxing.sh
#+END_SRC

When you get used to create groups of commands, you generally end up having a
sequence that comes out quite naturally.

It is handy to have each command do one thing and do it well, while at the same
time have a shortcut to chain them.

For the sake of the example, let's suppose you are writing a bunch of commands
to perform 3d printing. Hereafter, the printing aspect will be mocked. Its only
interest is to show one of my real life usages of clk.

You would first create the group of commands named ~printer~ like so.

#+name: create-group
#+BEGIN_SRC bash :results none :exports code :session 73f5d57e-d16a-490a-b4e1-0254d6296590
  clk command create python --group printer --description "This is a group of commands to deal with 3D printing."
#+END_SRC

Classically, with the end result in mind, you may start by writing the command
that sends the final gcode to the printer.

#+NAME: send_base
#+BEGIN_SRC python :exports none
  @option("--gcode", help="The gcode file", default="model.gcode")
  @flag("--warn-when-done", help="Trigger a notification when done")
  @argument("printer", help="The ip of the printer to send the gcode to")
  def send(gcode, warn_when_done, printer):
      """Send some gcode to your printer"""
      print(f"Printing {gcode} using {printer}")
      if warn_when_done:
          print("Driiiiiiing!")
#+END_SRC

#+NAME: send
#+BEGIN_SRC python :exports code :noweb yes
  @printer.command()
  <<send_base>>
#+END_SRC

In general, to get the gcode file that contains printer instruction, you first
slice a 3D model, most likely in the format STL.

Let's create this command.

#+NAME: slice_base
#+BEGIN_SRC python :exports none
  @option("--model", default=["model.stl"], help="The model to slice", multiple=True)
  @option("--output", default="model.gcode", help="The file getting the final gcode")
  def slice(model, output):
      """Slice a model"""
      print("Slicing " + ", ".join(model) + f" to {output}")
#+END_SRC

#+NAME: slice
#+BEGIN_SRC python :noweb yes
  @printer.command()
  <<slice_base>>
#+END_SRC

Now, we have a command that slices the 3D model to a gcode and one command to
send the gcode instructions to the printer.

That is nice. And you can play with those two commands, until you realize that
you also need to calibrate the printer before running the print. Let's create
this calibrate command.

#+NAME: calibrate
#+BEGIN_SRC python :exports code
  @printer.command()
  def calibrate():
      """Run everything that is needed to have the printer ready to print"""
      print("Running some stuff for the printer to be ready to go")
#+END_SRC

Great, we created three commands to play with our printer.

In most cases, we want to chain those commands in a so-called flow.

Let's define such a flow.

#+NAME: flow
#+BEGIN_SRC python
  from clk.overloads import get_command

  @printer.flow_command(flowdepends=["printer.calibrate"])
  @get_command("printer.slice").flow_option("model")
  @get_command("printer.send").flow_option("warn_when_done")
  @get_command("printer.send").flow_argument("printer")
  def flow(**kwargs):
      """Run the whole flow"""
      print("The flow is done")
#+END_SRC

Note that calibrate, slice and send don't have any precedence relationship
between each other. By providing ~flow_command~, ~flow_option~ and ~flow_argument~ in
that order, we explicitly say to the command named flow that it should run them
from top to bottom: calibrate, slice and then send.

The flow_option and flow_argument lines tell that this new command "captures"
those parameters from the respective commands.

This new command can be called with ~--model~, ~--warn-when-done~ and
~--printer~ and will eventually run ~printer calibrate~, ~printer slice~ and
then ~printer send~ with the appropriate parameters.

Note that we only defined explicitly the flow dependency to ~printer
calibrate~. The dependency to ~printer slice~ and ~printer send~ is implicitly
known by the fact we captured some of their parameters.

#+NAME: copy
#+BEGIN_SRC bash :results none :exports none :noweb yes :session 73f5d57e-d16a-490a-b4e1-0254d6296590
  cat<<EOF >> "${CLKCONFIGDIR}/python/printer.py"
  <<send>>

  <<slice>>

  <<calibrate>>

  <<flow>>
  EOF
#+END_SRC

Let's try to run the flow to get the feeling of how it is used.

#+NAME: run_flow
#+BEGIN_SRC bash :results verbatim :exports both :session 73f5d57e-d16a-490a-b4e1-0254d6296590 :cache yes
  clk printer flow myprinter --model somemodel --model someothermodel --warn-when-done
#+END_SRC

#+RESULTS[25af26071d091d5548b38e4eb061bf6ecba3358f]: run_flow
: Running some stuff for the printer to be ready to go
: Slicing somemodel, someothermodel to model.gcode
: Printing model.gcode using myprinter
: Driiiiiiing!
: The flow is done

* alternative use case, explicitly defining the flow
  :PROPERTIES:
  :CREATED:  [2024-02-16 16:57]
  :CUSTOM_ID: db06b88c-a231-4f46-b8f7-54e98db07e17
  :END:

You might want to stick with those 3 commands and don't want to add the extra
command ~flow~ to glue them together. This is doable by explicitly defining the
flow in the definition of ~@printer.command~ on top of every commands.

Yet get something like this.

#+NAME: with_explicit_flow
#+BEGIN_SRC python :results none :exports code :noweb yes
  <<calibrate>>

  @printer.command(flowdepends=["printer.calibrate"])
  <<slice_base>>

  @printer.command(flowdepends=["printer.slice"])
  <<send_base>>
#+END_SRC

#+name: commands-with-explicit-flow
#+BEGIN_SRC bash :results none :exports none :session 73f5d57e-d16a-490a-b4e1-0254d6296590 :noweb yes
  clk command create python --force --group printer --description "This is a group of commands to deal with 3D printing." --body '
<<with_explicit_flow>>
'
#+END_SRC

Now, you only have three commands and running the flow needs to be done explicitly.

#+NAME: running-the-explicit-flow
#+BEGIN_SRC bash :results verbatim :exports both :session 73f5d57e-d16a-490a-b4e1-0254d6296590 :cache yes
echo "# Running the send command, without the flow"
clk printer send myprinter
echo "# Running the send command, asking for its flow"
clk printer send myprinter --flow
#+END_SRC

#+RESULTS[ab4abc6d0df732b964aae068b34e2ecbc06d48d6]: running-the-explicit-flow
: # Running the send command, without the flow
: Printing model.gcode using myprinter
: # Running the send command, asking for its flow
: Running some stuff for the printer to be ready to go
: Slicing model.stl to model.gcode
: Printing model.gcode using myprinter


Doing so, there is no way to provide the parameters of the commands of the
flow. If you want to provide a value for ~--model~ of ~printer slice~, you will
have to use parameters.

#+NAME: running-the-explicit-flow-with-model
#+BEGIN_SRC bash :results verbatim :exports both :session 73f5d57e-d16a-490a-b4e1-0254d6296590 :cache yes
clk parameter set printer.slice --model someothermodel
clk printer send myprinter --flow
#+END_SRC

#+RESULTS[b8519ee1dee8a9434b4253ec4cfcb9c2ca8263a7]: running-the-explicit-flow-with-model
: New global parameters for printer.slice: --model someothermodel
: Running some stuff for the printer to be ready to go
: Slicing someothermodel to model.gcode
: Printing model.gcode using myprinter

Here, your mileage may vary. Choose the implementation that suits you better.

* when the flow is wrong
  :PROPERTIES:
  :CREATED:  [2024-02-16 17:20]
  :CUSTOM_ID: 96a6905e-06bd-48d5-a117-7e81ebde9399
  :ID:       841a8082-597b-45cc-8a4d-115e31137dc9
  :END:

  Let's assume you miss-typed the flow dependencies. Something like.

#+NAME: wrong-flow-deps
#+BEGIN_SRC python :results none :exports code :noweb yes
  <<calibrate>>

  @printer.command(flowdepends=["printer.calib"])
  <<slice_base>>

  @printer.command(flowdepends=["printer.slice"])
  <<send_base>>
#+END_SRC

#+name: install-with-wrong-flow-deps
#+BEGIN_SRC bash :results none :exports code :session 73f5d57e-d16a-490a-b4e1-0254d6296590 :noweb yes
  clk command create python --force --group printer --description "This is a group of commands to deal with 3D printing." --body '
<<wrong-flow-deps>>
'
#+END_SRC

When you run it, you will get the error

#+NAME: run-with-wrong-flow-deps
#+BEGIN_SRC bash :results verbatim :exports both :session 73f5d57e-d16a-490a-b4e1-0254d6296590 :cache yes
clk printer send --flow myprinter
#+END_SRC

#+RESULTS[a6e0572d6385dc840dd38fe6aebc100866184f32]: run-with-wrong-flow-deps
: error: The flow of printer.slice could not be resolved. Command printer.calib not found
: error: The flow of printer.send could not be resolved. Command printer.calib not found
: Usage: clk printer send [OPTIONS] PRINTER
: error: No such option: --flow
: Hint: If you don't know where this option comes from, try checking the parameters (with clk --no-parameter parameters show).

Beware that this means that you have to check that this command it actually defined.

#+NAME: script
#+BEGIN_SRC bash :results none :exports none :tangle ../../tests/use_cases/3D_printing_flow.sh :noweb yes :shebang "#!/bin/bash -eu"
  <<init>>

  <<create-group>>

  <<copy>>

  check-result(run_flow)

  <<commands-with-explicit-flow>>

  check-result(running-the-explicit-flow)

  check-result(running-the-explicit-flow-with-model)

  <<install-with-wrong-flow-deps>>

  check-result(run-with-wrong-flow-deps)

#+END_SRC
