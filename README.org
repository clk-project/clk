:PROPERTIES:
:ID:       4467b2d4-cd23-41df-a09f-1bfdcb1afecb
:END:
#+TITLE: README
#+language: en
#+options: toc:t
#+EXPORT_FILE_NAME: README.md

#+CALL: lp.org:check-result()

#+BEGIN_export markdown
[clk](https://clk-project.org/)
==============================================================================

[![Technical Debt](https://sonarcloud.io/api/project_badges/measure?project=clk-project_clk&metric=sqale_index)](https://sonarcloud.io/dashboard?id=clk-project_clk)

[![Vulnerabilities](https://sonarcloud.io/api/project_badges/measure?project=clk-project_clk&metric=vulnerabilities)](https://sonarcloud.io/dashboard?id=clk-project_clk)
[![Bugs](https://sonarcloud.io/api/project_badges/measure?project=clk-project_clk&metric=bugs)](https://sonarcloud.io/dashboard?id=clk-project_clk)
[![Code Smells](https://sonarcloud.io/api/project_badges/measure?project=clk-project_clk&metric=code_smells)](https://sonarcloud.io/dashboard?id=clk-project_clk)

[![Lines of Code](https://sonarcloud.io/api/project_badges/measure?project=clk-project_clk&metric=ncloc)](https://sonarcloud.io/dashboard?id=clk-project_clk)
[![Duplicated Lines (%)](https://sonarcloud.io/api/project_badges/measure?project=clk-project_clk&metric=duplicated_lines_density)](https://sonarcloud.io/dashboard?id=clk-project_clk)
[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=clk-project_clk&metric=coverage)](https://sonarcloud.io/dashboard?id=clk-project_clk)

[![Maintainability Rating](https://sonarcloud.io/api/project_badges/measure?project=clk-project_clk&metric=sqale_rating)](https://sonarcloud.io/dashboard?id=clk-project_clk)
[![Reliability Rating](https://sonarcloud.io/api/project_badges/measure?project=clk-project_clk&metric=reliability_rating)](https://sonarcloud.io/dashboard?id=clk-project_clk)
[![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=clk-project_clk&metric=security_rating)](https://sonarcloud.io/dashboard?id=clk-project_clk)

[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=clk-project_clk&metric=alert_status)](https://sonarcloud.io/dashboard?id=clk-project_clk)
[![CI](https://github.com/clk-project/clk/actions/workflows/ci.yml/badge.svg)](https://github.com/clk-project/clk/actions/workflows/ci.yml)

![Gitter ](https://img.shields.io/gitter/room/clk-project/clk)
![Libera](https://raster.shields.io/badge/libera.chat-%23clk-blue)
#+END_export

Come and discuss clk with us on
- [[https://web.libera.chat/?channels][#clk on Libera]]
- [[https://gitter.im/clk-project/community][Gitter]]

clk, the *Command Line Kit* is a unique tool that aims to contains everything
needed to create human friendly command line tools.

The [[id:7857f3bb-e4c7-4bad-9e27-ea48bf808a44][rationale]] attempts to explain why clk started to exist. You will find in the
[[./doc/use_cases][use cases]] classical situations where clk is worth being used. In the future, we
might write even more [[./doc][documentation]].

* Use cases
  :PROPERTIES:
  :CUSTOM_ID: d7cb0451-bc8f-42cc-912c-8a46599375a7
  :END:
  This is most likely the most useful part of the documentation. Take a look at
  the [[./doc/use_cases][use cases]] to find out how clk could be used in real life situations.

* In a nutshell                                                     :Context:
  :PROPERTIES:
  :CUSTOM_ID: fe60735c-91c2-4f54-8ae2-7e3b307f27a5
  :END:

  Install with

  #+BEGIN_SRC bash :tangle installer.sh :shebang "#!/bin/bash"
    curl -sSL https://clk-project.org/install.sh | bash
  #+END_SRC

  Then create a hello world command with

  #+NAME: cwd
  #+BEGIN_SRC bash :results none :exports none :session fe60735c-91c2-4f54-8ae2-7e3b307f27a5
    cd tests/use_cases/
  #+END_SRC

  #+NAME: init
  #+BEGIN_SRC bash :results none :exports none :session fe60735c-91c2-4f54-8ae2-7e3b307f27a5
    . ./sandboxing.sh
  #+END_SRC

  #+NAME: command
  #+BEGIN_SRC bash :results none :exports code :session fe60735c-91c2-4f54-8ae2-7e3b307f27a5
    clk command create bash hello-world --description "Some simple hello world command" --body 'echo "Hello world"'
  #+END_SRC

  #+NAME: run
  #+BEGIN_SRC bash :results verbatim :exports both :session fe60735c-91c2-4f54-8ae2-7e3b307f27a5 :cache yes
    clk hello-world
  #+END_SRC

  #+RESULTS[0c93732bdafe7b03043b9c23af57ef23f87f6a52]: run
  : Hello world

  #+NAME: hello-world
  #+BEGIN_SRC bash :results none :exports none :tangle ./tests/use_cases/hello_world.sh :shebang "#!/bin/bash -eu" :noweb yes
    <<init>>

    <<command>>

    check-result(run)
  #+END_SRC

  This actually does not tell you much why *clk* is so awesome. Try taking a look,
  the [[./doc/use_cases][use cases]] to get more real life examples.
* Rationale
  :PROPERTIES:
  :CUSTOM_ID: 7857f3bb-e4c7-4bad-9e27-ea48bf808a44
  :END:

  Low level command line tools are very powerful. Yet they are not very
  intuitive. It takes time to understand those like *find*, *kill*, *tr*, *awk*
  or *sed*. We spend a lot of time reading the documentation and the tool itself
  does not help much[fn:2].

  It looks like a lot of high level command line tools, like *maven* or *npm*
  have followed the same idea of relying on a comprehensive documentation and
  do not provide a friendly user experience.

  Yet, there are a lot a stuffs that the command line tool itself can do to
  become less a burden and more a partner.

  One awesome command line tool on that matter is *git*. There are semantic
  completion for almost everything (~git push <tab>~ shows the remotes and ~git
  push origin <tab>~ shows the branches). You can create aliases to shorten
  commands you often use. Almost every behavior can be enabled or disabled using
  config. Most commands provide meaningful suggestions of what commands you are
  likely to want to call next.

  The concepts behind *git* are not that easy and a good and comprehensive
  documentation is still needed. But *git* tries its best to be as friendly as
  possible anyway.

  I think that tools like *git* opened my mind and made me realize that command
  line tools are not necessarily obtuse.

  The *Command Line Kit* was started in 2016 out of the frustration of dealing
  with yet another set of command line tools that provided only the bare minimum
  that a CLI can provide.

  In my mind, the authors of those tools did not willingly create obtuse
  tools. They most likely could not afford the cognitive load of having to thing
  about such "non functional" feature.

  For that reason, *clk* provides out of the box a nice completion framework,
  aliases and a way to save configuration, so that when writing my command line
  tools, I don't have to think about them. They are automatically there[fn:1].

  There already exist awesome libraries to create nice command line
  interfaces. *click* provides an easy way to write the commands, *tqdm*
  provides nice progress bars, *humanize* helps converting dates and intervals
  to human readable ones. What *clk* does is use all that and opinionatedly
  combines them to create a "batteries included" tool.

  Nowadays, I use *clk* for most of my day to day use, from communicating in slack
  to fetching rss, to getting my mails or to play music. Under the hood, I use
  the classical tools such as flexget, offlineimap or mopidy. They simply are
  wrapped in a very user friendly overlay.
* Note on version
  :PROPERTIES:
  :CUSTOM_ID: 8152d0c9-564d-4761-a847-66a40e41aac5
  :END:

  *clk* is quite old, and most of its concepts are stable. There are still a few
  areas that I want to dig into before starting a v1. For a start, I want to end
  up describing all the [[./doc/use_cases][use cases]] that matter to me before considering it ready.

* Footnotes
  :PROPERTIES:
  :CUSTOM_ID: 073ffd02-dc04-4b32-b804-a9a51b180d69
  :END:
[fn:2] After more than a decade of use, I still have a hard time finding out how
       to use *find* for non trivial use cases.

[fn:1] for that reason, clk is also called the *C*ognitive *L*oad *K*iller.
